<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Ethereum Wallet Report</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
  <style>
    .loading {
      position: relative;
    }
    .loading::after {
      content: '';
      position: absolute;
      width: 1rem;
      height: 1rem;
      top: 50%;
      left: 50%;
      margin: -0.5rem 0 0 -0.5rem;
      border: 2px solid #cbd5e0;
      border-top-color: #4a5568;
      border-radius: 50%;
      animation: spinner 0.6s linear infinite;
    }
    @keyframes spinner {
      to {transform: rotate(360deg);}
    }
    .fade-in {
      animation: fadeIn 0.3s ease-in;
    }
    @keyframes fadeIn {
      from {opacity: 0;}
      to {opacity: 1;}
    }
  </style>
</head>
<body class="bg-gray-50 min-h-screen">
  <div class="max-w-4xl mx-auto p-6">
    <header class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900">Ethereum Wallet Balance Report</h1>
    </header>

    <main>
      <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
        <div class="flex flex-col sm:flex-row gap-4">
          <div class="flex-grow">
            <label for="addressInput" class="block text-sm font-medium text-gray-700 mb-2">Ethereum Address</label>
            <input
              type="text"
              id="addressInput"
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              placeholder="0x..."
            />
          </div>
          <div class="flex items-end">
            <button 
              id="runReportButton"
              class="w-full sm:w-auto px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors">
              Run Report
            </button>
          </div>
        </div>
      </div>

      <div id="results" class="fade-in"></div>
    </main>
  </div>

  <template id="error-template">
    <div class="bg-red-50 border-l-4 border-red-400 p-4 rounded">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
          </svg>
        </div>
        <div class="ml-3">
          <p class="text-sm text-red-700" id="error-message"></p>
        </div>
      </div>
    </div>
  </template>

  <template id="loading-template">
    <div class="bg-white p-8 rounded-lg shadow-sm text-center loading">
      <p class="text-gray-600">Fetching report...</p>
    </div>
  </template>

  <template id="report-template">
    <div class="bg-white rounded-lg shadow-sm p-6">
      <div class="space-y-6">
        <div>
          <h2 class="text-xl font-semibold text-gray-900 mb-4">Balance Snapshot</h2>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div class="bg-gray-50 p-4 rounded-lg">
              <p class="text-sm text-gray-600">Unstaked Balance</p>
              <p class="text-2xl font-semibold text-gray-900" id="unstaked-balance"></p>
            </div>
            <div class="bg-gray-50 p-4 rounded-lg">
              <p class="text-sm text-gray-600">Staked Balance</p>
              <p class="text-2xl font-semibold text-gray-900" id="staked-balance"></p>
            </div>
          </div>
        </div>

        <div id="validators-section"></div>

        <div class="border-t pt-4">
          <h2 class="text-xl font-semibold text-gray-900 mb-2">Balance Total</h2>
          <p class="text-3xl font-bold text-blue-600" id="total-balance"></p>
        </div>

        <div class="text-sm text-gray-500 space-y-2">
          <p id="generated-time"></p>
          <p class="font-medium">Data sources:</p>
          <ul class="list-disc pl-5 space-y-1">
            <li>Unstaked Balance: beaconcha.in/api/v1/validator public API</li>
            <li>Staked Balance: ethereum.publicnode.com public JSON-RPC</li>
          </ul>
        </div>
      </div>
    </div>
  </template>

  <script>
    class EthereumReport {
      constructor() {
        this.addressInput = document.getElementById('addressInput');
        this.runReportButton = document.getElementById('runReportButton');
        this.resultsDiv = document.getElementById('results');
        
        this.setupEventListeners();
        this.prefillAddress();
      }

      setupEventListeners() {
        this.runReportButton.addEventListener('click', () => this.runReport());
      }

      prefillAddress() {
        if (window.location.search !== "") {
          const addr = new URLSearchParams(window.location.search).get("addr");
          if (addr !== null) {
            this.addressInput.value = addr;
            this.runReport();
          }
        }
      }

      setSearchParam(key, value) {
        const searchParams = new URLSearchParams(window.location.search);
        searchParams.set(key, value);
        const newRelativePathQuery = window.location.pathname + '?' + searchParams.toString();
        history.pushState(null, '', newRelativePathQuery);
      }

      showError(message) {
        const template = document.getElementById('error-template');
        const clone = template.content.cloneNode(true);
        clone.querySelector('#error-message').textContent = message;
        this.resultsDiv.innerHTML = '';
        this.resultsDiv.appendChild(clone);
      }

      showLoading() {
        const template = document.getElementById('loading-template');
        const clone = template.content.cloneNode(true);
        this.resultsDiv.innerHTML = '';
        this.resultsDiv.appendChild(clone);
      }

      async getEtherBalance(address) {
        const response = await fetch("https://ethereum.publicnode.com", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            jsonrpc: "2.0",
            id: 1,
            method: "eth_getBalance",
            params: [address, "latest"],
          }),
        });
        const data = await response.json();
        return parseInt(data.result, 16).toString();
      }

      async getValidatorsFromBeacon(address) {
        const url = `https://beaconcha.in/api/v1/validator/eth1/${address}`;
        const response = await fetch(url);
        const data = await response.json();
        return data.data || [];
      }

      async getValidatorDetail(validatorIndex) {
        const url = `https://beaconcha.in/api/v1/validator/${validatorIndex}`;
        const response = await fetch(url);
        const data = await response.json();
        return data.data || null;
      }

      renderReport(data) {
        const template = document.getElementById('report-template');
        const clone = template.content.cloneNode(true);

        // Set balances
        clone.querySelector('#unstaked-balance').textContent = `${data.balanceEth.toFixed(8)} ETH`;
        clone.querySelector('#staked-balance').textContent = `${data.stakedBalance.toFixed(8)} ETH`;
        clone.querySelector('#total-balance').textContent = `${(data.stakedBalance + data.balanceEth).toFixed(8)} ETH`;
        
        // Set validators section
        const validatorsSection = clone.querySelector('#validators-section');
        if (data.validatorBalances.length === 0) {
          validatorsSection.innerHTML = `<p class="text-gray-600">No active Beacon Chain validators were found for this address.</p>`;
        } else {
          validatorsSection.innerHTML = `
            <h3 class="text-lg font-medium text-gray-900 mb-3">Active Validators</h3>
            <div class="bg-gray-50 rounded-lg p-4">
              <ul class="space-y-2">
                ${data.validatorBalances.map(val => `
                  <li class="flex justify-between">
                    <span class="text-gray-600">Validator ${val.index}</span>
                    <span class="font-medium">${(val.balance / 1e9).toFixed(2)} ETH</span>
                  </li>
                `).join('')}
              </ul>
            </div>
          `;
        }

        // Set timestamp
        const nowUtc = new Date();
        clone.querySelector('#generated-time').textContent = `Report generated ${nowUtc.toString()}`;

        this.resultsDiv.innerHTML = '';
        this.resultsDiv.appendChild(clone);
      }

      async runReport() {
        const address = this.addressInput.value.trim();

        if (!/^0x[a-fA-F0-9]{40}$/.test(address)) {
          this.showError('Please enter a valid Ethereum address');
          return;
        }

        this.setSearchParam('addr', address);
        this.showLoading();

        try {
          const balanceWei = await this.getEtherBalance(address);
          const balanceEth = parseFloat(balanceWei) / 1e18;
          const validatorData = await this.getValidatorsFromBeacon(address);

          const validatorBalances = [];
          for (const validator of validatorData) {
            const detailedInfo = await this.getValidatorDetail(validator.validatorindex);
            if (detailedInfo && detailedInfo.status === "active_online") {
              validatorBalances.push({
                index: detailedInfo.validatorindex,
                balance: detailedInfo.effectivebalance,
              });
            }
          }

          const stakedBalance = validatorBalances
            .map((vb) => vb.balance)
            .reduce((acc, e) => acc + e, 0) / 1e9;

          this.renderReport({
            balanceEth,
            stakedBalance,
            validatorBalances
          });
        } catch (error) {
          console.error(error);
          this.showError('Error fetching data. Please try again later.');
        }
      }
    }

    // Initialize the application
    new EthereumReport();
  </script>
</body>
</html>
